version: "3"

services:
  apigateway:
    image: traefik:v2.2.1
    ports:
      - "5080:80" # Port of the API Gateway, which will be the port behind which the system will be published
      - "5088:8080" # Dashboard of Traefik for troubleshooting
    command:
      - "--api.insecure=true"
      - "--api.dashboard=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock # So that Traefik can listen to the Docker events
    networks:
      - todoapp-network

  todos:
    build:
      context: ../src # Relative to this file
      dockerfile: Todos/Todos.Api/Dockerfile.devcontainer # The Dockerfile to build; path is relative to the context
    volumes:
      - ..:/workspace:cached # Source files, accessed by the devcontainer
    command: /bin/sh -c "while sleep 1000; do :; done"  # Make sure container does not exit, instead, wait for debugger to connect
    networks: # All microservices are connected by this private Docker network, which also provides DNS
      - todoapp-network
    labels:
      - "traefik.enable=true" # Enable publishing this service by Traefik
      - "traefik.http.routers.todos.rule=PathPrefix(`/api/todos`)" # Routing rule
      - "traefik.http.middlewares.todos-auth.forwardauth.address=http://users/api/auth" # Forward authentication middleware definition
      - "traefik.http.routers.todos.middlewares=todos-auth@docker" # Use the auth middleware in the /api/users route
    ports:
      - "5081:80" # Each microservice gets its own port for debugging
    environment: # Configuration of microservices
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_ElasticsearchUrl=http://elasticsearch:9200
      - ASPNETCORE_RedisUrl=redis:6379

  web:
    build:
      context: ../src
      dockerfile: Web/Dockerfile
    networks:
      - todoapp-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.web.rule=PathPrefix(`/`)" # Routing rule
    ports:
      - "5082:80"

  users:
    build:
      context: ../src
      dockerfile: Users/Dockerfile
    networks:
      - todoapp-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.auth.rule=PathPrefix(`/api/auth`)" # Two routing rules are defined: this one, for the authentication, can be called by anyone
      - "traefik.http.routers.users.rule=PathPrefix(`/api/users`)" # This other rule works on a different url scheme, and requires authentication
      - "traefik.http.middlewares.users-auth.forwardauth.address=http://users/api/auth" # Forward authentication middleware definition
      - "traefik.http.routers.users.middlewares=users-auth@docker" # Use the auth middleware in the /api/users route
    ports:
      - "5083:80"
    environment:
      - TODOAPP_MongoUrl=mongodb://mongodb:27017
      - TODOAPP_RedisUrl=redis
      - TODOAPP_IsDevelopment=true

  mongodb:
    image: mongo:4.2.8
    networks:
      - todoapp-network
    volumes:
      - todoapp-mongo-data:/data/db
    ports:
      - "27017:27017" # For debugging, makes mongodb available on localhost:27017

  redis:
    image: redis:6.0.5-alpine
    networks:
      - todoapp-network

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch-oss:7.8.0
    environment:
      - cluster.name=elasticsearch # Settings to start Elasticsearch in a single-node development environment
      - node.name=elasticsearch
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms256m -Xmx256m"
    volumes:
      - todoapp-elastic-data:/usr/share/elasticsearch/data
    networks:
      - todoapp-network
    ports:
      - "9200:9200" # For debugging, makes Elasticsearch available on localhost:9200

volumes: # The volumes will store the database data; kept even after the containers are deleted
  todoapp-mongo-data:
    driver: local
  todoapp-elastic-data:
    driver: local

networks:
  todoapp-network:
    driver: bridge
